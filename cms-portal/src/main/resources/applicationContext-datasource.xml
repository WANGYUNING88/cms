<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd">
    <!-- <context:property-placeholder location="classpath:datasource.properties"/>-->
    <!-- 数据源，事务控制 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName"
                  value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <!-- 配置初始化大小，最大，最小 -->
        <property name="initialSize" value="${datasource.initialSize}"/>
        <property name="minIdle" value="${datasource.minIdle}"/>
        <property name="maxActive" value="${datasource.maxActive}"/>
        <!-- 配置获取连接池等待超时的时间 -->
        <property name="maxWait" value="${datasource.maxWait}"/>
        <!-- 配置间隔多久才进行一次检测，检查需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${datasource.timeBetweenEvictionRunsMillis}"/>
        <!-- 配置一个连接池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${datasource.minEvictableIdleTimeMillis}"/>
        <!-- 检验SQL -->
        <property name="validationQuery" value="${datasource.validationQuery}"/>
        <property name="testWhileIdle" value="${datasource.testWhileIdle}"/>
        <property name="testOnBorrow" value="${datasource.testOnBorrow}"/>
        <property name="testOnReturn" value="${datasource.testOnReturn}"/>
        <!-- 打开PSCache，并且指定每个连接的PSCache的大小 -->
        <property name="poolPreparedStatements" value="${datasource.poolPreparedStatements}"/>
        <property name="maxPoolPreparedStatementPerConnectionSize"
                  value="${datasource.maxPoolPreparedStatementPerConnectionSize}"/>
        <!-- 合并多个DruidDataSource的监控数据 -->
        <property name="useGlobalDataSourceStat" value="${datasource.useGlobalDataSourceStat}"/>
        <!-- 配置监控统计拦截的filters -->
        <property name="proxyFilters">
            <list>
                <ref bean="stat-filter"/>
            </list>
        </property>
    </bean>
    <!-- 配置和mybatis的整合 -->
    <!-- 配置SessionFactory -->
    <bean id="sqlSessionFactory"
          class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 引入实体类 -->
        <property name="dataSource" ref="dataSource"/>
        <!-- 指定mybatis的mapper文件位置 -->
        <property name="mapperLocations"
                  value="classpath*:com/wang/dao/mapper/mappers/**.xml"/>
        <property name="configuration">
            <bean class="org.apache.ibatis.session.Configuration">
                <property name="mapUnderscoreToCamelCase" value="true"/>
                <!-- 数据库连接超过25000秒仍未响应则超时 -->
                <property name="defaultStatementTimeout" value="25000"/>
                <!-- 开启缓存支持 -->
                <property name="cacheEnabled" value="true"/>
                <!-- mybatis中，如果要实现加载，必循是如下配置，两个开关都要设置 -->
                <property name="lazyLoadingEnabled" value="true"/>
                <property name="aggressiveLazyLoading" value="false"/>
                <!-- 可以阻挡不相干的操作触发，实现懒加载 -->
                <property name="lazyLoadTriggerMethods" value=""/>
            </bean>
        </property>
    </bean>
    <!-- 配置扫描器，将mybatis接口的实现注入到IOC容器中 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 扫描所有dao接口的实现，加入到IOC容器中 -->
        <property name="basePackage" value="com.wang.dao.mapper"/>
    </bean>
    <!--    &lt;!&ndash; 配置一个可以执行批量的SQLSession &ndash;&gt;
        <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
            <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"></constructor-arg>
            <constructor-arg name="executorType" value="BATCH"></constructor-arg>
        </bean>-->

    <!-- 事务控制的配置 -->
    <bean name="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!-- 控制数据源 -->
        <property name="dataSource" ref="dataSource"/>
        <property name="rollbackOnCommitFailure" value="true"/>
    </bean>
    <!-- 使用@Transational进行声明式事务管理需要声明下面这行 -->
    <tx:annotation-driven proxy-target-class="true"/>
    <!-- 慢sql记录 -->
    <bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">
        <property name="mergeSql" value="true"/>
        <property name="slowSqlMillis" value="10000"/>
        <property name="logSlowSql" value="true"/>
    </bean>
</beans>